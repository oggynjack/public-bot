<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    
    <!-- Google Fonts - Poppins -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Chart.js for analytics -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        electric: {
                            50: '#eff6ff',
                            100: '#dbeafe', 
                            200: '#bfdbfe',
                            300: '#93c5fd',
                            400: '#60a5fa',
                            500: '#3b82f6', // Main electric blue
                            600: '#2563eb',
                            700: '#1d4ed8',
                            800: '#1e40af',
                            900: '#1e3a8a'
                        },
                        discord: {
                            50: '#f0f4ff',
                            100: '#e0e7ff',
                            200: '#c7d2fe',
                            300: '#a5b4fc',
                            400: '#818cf8',
                            500: '#5865f2',
                            600: '#4f46e5',
                            700: '#4338ca',
                            800: '#3730a3',
                            900: '#312e81'
                        },
                        premium: {
                            50: '#fefce8',
                            100: '#fef9c3',
                            200: '#fef08a',
                            300: '#fde047',
                            400: '#facc15',
                            500: '#eab308',
                            600: '#ca8a04',
                            700: '#a16207',
                            800: '#854d0e',
                            900: '#713f12'
                        }
                    },
                    backgroundImage: {
                        'electric-gradient': 'linear-gradient(135deg, #1e3a8a 0%, #1e40af 25%, #2563eb  50%, #3b82f6 75%, #60a5fa 100%)',
                        'dark-electric': 'linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #475569 75%, #64748b 100%)'
                    }
                }
            }
        }
    </script>
    
    <style>
        /* Electric Blue Animated Waves Background */
        body {
            background: linear-gradient(-45deg, #1e3a8a, #1e40af, #2563eb, #3b82f6, #60a5fa, #93c5fd, #1e3a8a, #2563eb);
            background-size: 400% 400%;
            animation: electricWaves 8s ease infinite;
            min-height: 100vh;
            font-family: 'Poppins', sans-serif;
            position: relative;
            overflow-x: hidden;
        }

        /* Electric wave animation */
        @keyframes electricWaves {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        /* Wave overlay effect */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(30, 58, 138, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(37, 99, 235, 0.2) 0%, transparent 50%);
            animation: waveMove 12s ease-in-out infinite;
            pointer-events: none;
            z-index: 0;
        }

        @keyframes waveMove {
            0%, 100% { 
                transform: translate(0px, 0px) scale(1); 
            }
            33% { 
                transform: translate(30px, -30px) scale(1.1); 
            }
            66% { 
                transform: translate(-20px, 20px) scale(0.9); 
            }
        }

        /* Electric particles */
        .electric-particle {
            position: fixed;
            border-radius: 50%;
            pointer-events: none;
            opacity: 0.6;
            animation: electricFloat 6s ease-in-out infinite;
            box-shadow: 0 0 10px rgba(59, 130, 246, 0.8);
            z-index: 1;
        }

        .electric-particle:nth-child(1) {
            width: 8px;
            height: 8px;
            background: #60a5fa;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .electric-particle:nth-child(2) {
            width: 12px;
            height: 12px;
            background: #3b82f6;
            top: 60%;
            left: 80%;
            animation-delay: 2s;
        }

        .electric-particle:nth-child(3) {
            width: 6px;
            height: 6px;
            background: #93c5fd;
            top: 40%;
            left: 60%;
            animation-delay: 4s;
        }

        @keyframes electricFloat {
            0%, 100% {
                transform: translateY(0) translateX(0);
                box-shadow: 0 0 10px rgba(59, 130, 246, 0.8);
            }
            25% {
                transform: translateY(-20px) translateX(10px);
                box-shadow: 0 0 20px rgba(96, 165, 250, 1);
            }
            50% {
                transform: translateY(-40px) translateX(-5px);
                box-shadow: 0 0 15px rgba(147, 197, 253, 0.9);
            }
            75% {
                transform: translateY(-20px) translateX(-10px);
                box-shadow: 0 0 25px rgba(59, 130, 246, 1);
            }
        }

        /* Compact layout with minimal spacing */
        .compact-section {
            margin-bottom: 1rem; /* Reduced from 1.5rem */
        }

        .ultra-compact {
            margin-bottom: 0.75rem; /* Even more compact */
        }
        
        .glass-effect {
            backdrop-filter: blur(15px);
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.25);
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
        }
        
        .electric-glow {
            box-shadow: 0 0 20px rgba(59, 130, 246, 0.4);
        }
        
        .card-hover {
            transition: all 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }

        /* Enhanced Glass Cards with better visibility */
        .glass-card {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 16px;
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
        }

        .glass-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 35px 60px rgba(0, 0, 0, 0.25);
            background: rgba(255, 255, 255, 0.25);
        }

        /* Enhanced modal styling */
        .modal-glass {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(25px);
            border: 2px solid rgba(255, 255, 255, 0.4);
            border-radius: 20px;
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.3);
        }

        /* Input field styling */
        .glass-input {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
        }

        .glass-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .glass-input:focus {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(59, 130, 246, 0.8);
            outline: none;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

        /* Premium text with electric effect */
        .premium-text {
            background: linear-gradient(45deg, #ffffff 0%, #60a5fa 50%, #ffffff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 800;
            text-shadow: 0 0 30px rgba(96, 165, 250, 0.5);
        }

        /* Minimize all gaps and spacing */
        .tight-grid {
            gap: 0.75rem; /* Reduced from default */
        }

        .tight-spacing {
            padding: 0.75rem; /* Reduced padding */
        }
    </style>
</head>
<body class="min-h-screen relative">
    <!-- Custom Notification System -->
    <div id="notificationContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>
    
    <!-- Electric Particles -->
    <div class="electric-particle"></div>
    <div class="electric-particle"></div>
    <div class="electric-particle"></div>
    
    <!-- Navigation -->
    <nav class="glass-effect border-b border-white/20 relative z-10">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-14"> <!-- Reduced height -->
                <!-- Logo -->
                <div class="flex items-center">
                    <div class="flex items-center space-x-3">
                        <i class="fas fa-user-shield text-white text-xl electric-glow"></i> <!-- Reduced size -->
                        <span class="text-lg font-bold text-white">Admin Panel</span> <!-- Reduced size -->
                        <span class="px-2 py-1 bg-white/20 text-white text-xs font-bold rounded-full electric-glow">ADMIN</span>
                    </div>
                </div>

                <!-- Admin Controls -->
                <div class="flex items-center space-x-3"> <!-- Reduced spacing -->
                    <!-- Switch to User Panel -->
                    <a href="/dashboard" class="bg-electric-600 hover:bg-electric-700 text-white px-3 py-1.5 rounded-lg transition-colors duration-200 flex items-center space-x-2 electric-glow text-sm"> <!-- Compact -->
                        <i class="fas fa-user text-sm"></i>
                        <span>User Panel</span>
                    </a>
                    
                    <!-- Admin Info -->
                    <div class="text-gray-300 text-sm"> <!-- Smaller text -->
                        <i class="fas fa-user-circle mr-1"></i>
                        <%= user.username || 'Admin' %>
                    </div>
                    
                    <!-- Logout -->
                    <a href="/admin/logout" class="bg-red-600 hover:bg-red-700 text-white px-3 py-1.5 rounded-lg transition-colors duration-200 flex items-center space-x-1 text-sm"> <!-- Compact -->
                        <i class="fas fa-sign-out-alt text-sm"></i>
                        <span>Logout</span>
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="min-h-screen py-3 text-white relative z-10"> <!-- Reduced padding -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="mb-4 ultra-compact"> <!-- More compact -->
                <h1 class="text-3xl font-black text-white mb-1"> <!-- Reduced size and margin -->
                    <i class="fas fa-tachometer-alt mr-2 text-white electric-glow"></i>
                    <span class="premium-text">Admin Dashboard</span>
                </h1>
                <p class="text-white/80 text-base font-medium">Manage users, bots, subscriptions and system settings</p> <!-- Smaller text -->
            </div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 tight-grid mb-4 ultra-compact">
                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg electric-glow"> <!-- Reduced padding -->
                            <i class="fas fa-users text-white text-xl"></i> <!-- Smaller icon -->
                        </div>
                        <div class="ml-3"> <!-- Reduced margin -->
                            <p class="text-white/80 text-xs font-medium">Total Users</p> <!-- Smaller text -->
                            <p class="text-2xl font-black text-white" id="totalUsers"><%= stats?.totalUsers || 0 %></p> <!-- Smaller number -->
                        </div>
                    </div>
                </div>

                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg electric-glow">
                            <i class="fas fa-crown text-white text-xl"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-white/80 text-xs font-medium">Premium Users</p>
                            <p class="text-2xl font-black text-white" id="premiumUsers"><%= stats?.premiumUsers || 0 %></p>
                        </div>
                    </div>
                </div>

                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg electric-glow">
                            <i class="fas fa-robot text-white text-xl"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-white/80 text-xs font-medium">Active Bots</p>
                            <p class="text-2xl font-black text-white" id="activeBots"><%= stats?.totalBots || 0 %></p>
                        </div>
                    </div>
                </div>

                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg electric-glow">
                            <i class="fas fa-user-shield text-white text-xl"></i>
                        </div>
                        <div class="ml-3">
                            <p class="text-white/80 text-xs font-medium">Total Admins</p>
                            <p class="text-2xl font-black text-white" id="totalAdmins"><%= stats?.totalAdmins || 0 %></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Performance Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 tight-grid mb-4 ultra-compact">
                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 bg-electric-500/30 rounded-lg electric-glow">
                                <i class="fas fa-microchip text-electric-300 text-xl"></i>
                            </div>
                            <div class="ml-3">
                                <p class="text-white/80 text-xs font-medium">CPU Usage</p>
                                <p class="text-xl font-black text-white" id="cpuUsage">0%</p>
                            </div>
                        </div>
                        <div class="w-16 h-2 bg-white/20 rounded-full overflow-hidden">
                            <div class="h-full bg-electric-500 transition-all duration-500" id="cpuBar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>

                <div class="glass-card tight-spacing card-hover">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 bg-purple-500/30 rounded-lg electric-glow">
                                <i class="fas fa-memory text-purple-300 text-xl"></i>
                            </div>
                            <div class="ml-3">
                                <p class="text-white/80 text-xs font-medium">RAM Usage</p>
                                <p class="text-xl font-black text-white" id="ramUsage">0%</p>
                            </div>
                        </div>
                        <div class="w-16 h-2 bg-white/20 rounded-full overflow-hidden">
                            <div class="h-full bg-purple-500 transition-all duration-500" id="ramBar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Admin Controls Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 tight-grid mb-4 ultra-compact">
                <!-- Payment Management -->
                <div class="glass-card tight-spacing card-hover">
                    <h3 class="text-base font-bold text-white mb-2 flex items-center"> <!-- Smaller heading -->
                        <i class="fas fa-credit-card mr-2 text-green-400 text-sm"></i>
                        Payment Management
                    </h3>
                    <div class="space-y-1.5"> <!-- Reduced spacing -->
                        <button onclick="approvePayment()" class="w-full bg-green-600 hover:bg-green-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs"> <!-- Compact buttons -->
                            <i class="fas fa-check mr-1 text-xs"></i>Approve Payment
                        </button>
                        <button onclick="revokePremium()" class="w-full bg-red-600 hover:bg-red-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-times mr-1 text-xs"></i>Revoke Premium
                        </button>
                        <button onclick="pausePremium()" class="w-full bg-orange-600 hover:bg-orange-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-pause mr-1 text-xs"></i>Pause Premium
                        </button>
                    </div>
                </div>

                <!-- User Management -->
                <div class="glass-card tight-spacing card-hover">
                    <h3 class="text-base font-bold text-white mb-2 flex items-center">
                        <i class="fas fa-users-cog mr-2 text-electric-400 text-sm"></i>
                        User Management
                    </h3>
                    <div class="space-y-1.5">
                        <button onclick="openUserListModal()" class="w-full bg-electric-600 hover:bg-electric-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 electric-glow text-xs">
                            <i class="fas fa-list mr-1 text-xs"></i>Manage Users
                        </button>
                        <button onclick="addUserModal()" class="w-full bg-green-600 hover:bg-green-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-user-plus mr-1 text-xs"></i>Add User
                        </button>
                        <button onclick="managePremiumUsers()" class="w-full bg-premium-600 hover:bg-premium-700 text-black py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-crown mr-1 text-xs"></i>Premium Controls
                        </button>
                    </div>
                </div>

                <!-- Bot Management -->
                <div class="glass-card tight-spacing card-hover">
                    <h3 class="text-base font-bold text-white mb-2 flex items-center">
                        <i class="fas fa-robot mr-2 text-green-400 text-sm"></i>
                        Bot Management
                    </h3>
                    <div class="space-y-1.5">
                        <button onclick="openBotListModal()" class="w-full bg-green-600 hover:bg-green-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-list mr-1 text-xs"></i>View All Bots
                        </button>
                        <button onclick="restartAllBots()" class="w-full bg-orange-600 hover:bg-orange-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-restart mr-1 text-xs"></i>Restart All Bots
                        </button>
                        <button onclick="monitorBots()" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-1.5 px-3 rounded-lg transition-colors duration-200 text-xs">
                            <i class="fas fa-chart-line mr-1 text-xs"></i>Monitor Performance
                        </button>
                    </div>
                </div>

                <% if (user.role === 'master') { %>
                <!-- Admin Management (Master Admin Only) -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700 border-premium-500/30">
                    <h3 class="text-xl font-bold text-white mb-4 flex items-center">
                        <i class="fas fa-user-shield mr-2 text-premium-400"></i>
                        Admin Management
                        <span class="ml-2 px-2 py-1 text-xs bg-premium-500 text-black rounded-full">MASTER ONLY</span>
                    </h3>
                    <div class="space-y-3">
                        <button onclick="addNewAdmin()" class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-user-plus mr-2"></i>Add New Admin
                        </button>
                        <button onclick="viewAllAdmins()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-users-cog mr-2"></i>View All Admins
                        </button>
                        <button onclick="removeAdmin()" class="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-user-minus mr-2"></i>Remove Admin
                        </button>
                    </div>
                </div>
                <% } %>

                <!-- System Settings -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4 flex items-center">
                        <i class="fas fa-cogs mr-2 text-purple-400"></i>
                        System Settings
                    </h3>
                    <div class="space-y-3">
                        <button onclick="systemSettings()" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-sliders-h mr-2"></i>General Settings
                        </button>
                        <button onclick="lavalinkSettings()" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-music mr-2"></i>Lavalink Config
                        </button>
                        <button onclick="viewLogs()" class="w-full bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                            <i class="fas fa-file-alt mr-2"></i>View System Logs
                        </button>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- User Activity Log -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4 flex items-center">
                        <i class="fas fa-history mr-2 text-blue-400"></i>
                        Recent User Activity
                    </h3>
                    <div class="space-y-3">
                        <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                                    <i class="fas fa-user-plus text-white text-sm"></i>
                                </div>
                                <div>
                                    <p class="text-white text-sm">New user registration</p>
                                    <p class="text-gray-400 text-xs">User#1234</p>
                                </div>
                            </div>
                            <span class="text-gray-400 text-xs">2 min ago</span>
                        </div>
                        <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-premium-500 rounded-full flex items-center justify-center">
                                    <i class="fas fa-crown text-black text-sm"></i>
                                </div>
                                <div>
                                    <p class="text-white text-sm">Premium subscription</p>
                                    <p class="text-gray-400 text-xs">User#5678</p>
                                </div>
                            </div>
                            <span class="text-gray-400 text-xs">5 min ago</span>
                        </div>
                        <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                                    <i class="fas fa-robot text-white text-sm"></i>
                                </div>
                                <div>
                                    <p class="text-white text-sm">Bot created</p>
                                    <p class="text-gray-400 text-xs">MusicBot#9012</p>
                                </div>
                            </div>
                            <span class="text-gray-400 text-xs">10 min ago</span>
                        </div>
                    </div>
                </div>

                <!-- System Status -->
                <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <h3 class="text-xl font-bold text-white mb-4 flex items-center">
                        <i class="fas fa-server mr-2 text-green-400"></i>
                        System Status
                    </h3>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                <span class="text-gray-300">Database</span>
                            </div>
                            <span class="text-green-400 font-semibold">Operational</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                <span class="text-gray-300">Lavalink Servers</span>
                            </div>
                            <span class="text-green-400 font-semibold">3/3 Online</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                <span class="text-gray-300">Redis Cache</span>
                            </div>
                            <span class="text-yellow-400 font-semibold">High Load</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                <span class="text-gray-300">Discord API</span>
                            </div>
                            <span class="text-green-400 font-semibold">Operational</span>
                        </div>
                    </div>
                    
                    <!-- Quick Actions -->
                    <div class="mt-6 pt-4 border-t border-gray-700">
                        <h4 class="text-white font-semibold mb-3">Quick Actions</h4>
                        <div class="grid grid-cols-2 gap-2">
                            <button onclick="restartSystem()" class="bg-orange-600 hover:bg-orange-700 text-white py-2 px-3 rounded text-sm transition-colors duration-200">
                                <i class="fas fa-redo mr-1"></i>Restart
                            </button>
                            <button onclick="clearCache()" class="bg-red-600 hover:bg-red-700 text-white py-2 px-3 rounded text-sm transition-colors duration-200">
                                <i class="fas fa-trash mr-1"></i>Clear Cache
                            </button>
                            <button onclick="backupSystem()" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded text-sm transition-colors duration-200">
                                <i class="fas fa-download mr-1"></i>Backup
                            </button>
                            <button onclick="systemInfo()" class="bg-gray-600 hover:bg-gray-700 text-white py-2 px-3 rounded text-sm transition-colors duration-200">
                                <i class="fas fa-info mr-1"></i>Info
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- User Management Modal -->
    <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-white">User Management</h2>
                    <button onclick="closeModal('userModal')" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times text-2xl"></i>
                    </button>
                </div>
                
                <!-- Search Bar -->
                <div class="mb-4">
                    <input type="text" id="userSearch" placeholder="Search users by ID, email, or username..." 
                           class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                </div>
                
                <!-- Users Table -->
                <div class="overflow-x-auto">
                    <table class="w-full text-left">
                        <thead>
                            <tr class="bg-gray-700">
                                <th class="p-3 text-white">User ID</th>
                                <th class="p-3 text-white">Username</th>
                                <th class="p-3 text-white">Email</th>
                                <th class="p-3 text-white">Premium</th>
                                <th class="p-3 text-white">Bots</th>
                                <th class="p-3 text-white">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <tr>
                                <td colspan="6" class="p-3 text-center text-gray-400">Loading users...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add User Modal -->
    <div id="addUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-bold text-white">Add New User</h2>
                    <button onclick="closeModal('addUserModal')" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <form id="addUserForm" class="space-y-4">
                    <div>
                        <label class="block text-white mb-2">Discord User ID</label>
                        <input type="text" id="newUserId" required 
                               class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                    </div>
                    <div>
                        <label class="block text-white mb-2">Username</label>
                        <input type="text" id="newUsername" required 
                               class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                    </div>
                    <div>
                        <label class="block text-white mb-2">Email</label>
                        <input type="email" id="newUserEmail" 
                               class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                    </div>
                    <div>
                        <label class="flex items-center text-white">
                            <input type="checkbox" id="newUserPremium" class="mr-2">
                            Grant Premium Access
                        </label>
                    </div>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg">
                            Add User
                        </button>
                        <button type="button" onclick="closeModal('addUserModal')" 
                                class="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Bot Management Modal -->
    <div id="botModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-gray-800 rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-white">Bot Management</h2>
                    <button onclick="closeModal('botModal')" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times text-2xl"></i>
                    </button>
                </div>
                
                <!-- Bots Table -->
                <div class="overflow-x-auto">
                    <table class="w-full text-left">
                        <thead>
                            <tr class="bg-gray-700">
                                <th class="p-3 text-white">Bot ID</th>
                                <th class="p-3 text-white">Owner</th>
                                <th class="p-3 text-white">Status</th>
                                <th class="p-3 text-white">Uptime</th>
                                <th class="p-3 text-white">Memory</th>
                                <th class="p-3 text-white">CPU</th>
                                <th class="p-3 text-white">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="botsTableBody">
                            <tr>
                                <td colspan="7" class="p-3 text-center text-gray-400">Loading bots...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals and JavaScript -->
    <script>
        // Custom notification system
        function showNotification(message, type = 'success') {
            const container = document.getElementById('notificationContainer');
            const notification = document.createElement('div');
            
            const colors = {
                success: 'bg-green-600 border-green-500',
                error: 'bg-red-600 border-red-500',
                warning: 'bg-orange-600 border-orange-500',
                info: 'bg-blue-600 border-blue-500'
            };
            
            notification.className = `${colors[type]} text-white px-4 py-3 rounded-lg border-l-4 shadow-lg transform translate-x-full opacity-0 transition-all duration-300 max-w-sm`;
            notification.innerHTML = `
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white/80 hover:text-white">
                        <i class="fas fa-times text-xs"></i>
                    </button>
                </div>
            `;
            
            container.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full', 'opacity-0');
            }, 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full', 'opacity-0');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }

        // Modal Management
        function openModal(modalId) {
            document.getElementById(modalId).classList.remove('hidden');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
        }

        // User Management Functions
        function openUserListModal() {
            openModal('userModal');
            loadUsers();
        }

        function addUserModal() {
            openModal('addUserModal');
        }

        function openBotListModal() {
            openModal('botModal');
            loadBots();
        }

        async function loadUsers() {
            try {
                const response = await fetch('/api/admin/users');
                const data = await response.json();
                
                if (data.success) {
                    const tbody = document.getElementById('usersTableBody');
                    tbody.innerHTML = '';
                    
                    data.users.forEach(user => {
                        const row = document.createElement('tr');
                        row.className = 'border-b border-gray-700';
                        row.innerHTML = `
                            <td class="p-3 text-white font-mono">${user.id}</td>
                            <td class="p-3 text-white">${user.username || 'N/A'}</td>
                            <td class="p-3 text-white">${user.email || 'N/A'}</td>
                            <td class="p-3">
                                <span class="px-2 py-1 rounded-full text-xs ${user.isPremium ? 'bg-premium-500 text-black' : 'bg-gray-600 text-white'}">
                                    ${user.isPremium ? 'Premium' : 'Free'}
                                </span>
                            </td>
                            <td class="p-3 text-white">${user.botCount || 0}</td>
                            <td class="p-3">
                                <div class="flex space-x-2">
                                    <button onclick="toggleUserPremium('${user.id}', ${!user.isPremium})" 
                                            class="px-3 py-1 text-xs rounded ${user.isPremium ? 'bg-red-600 hover:bg-red-700' : 'bg-premium-600 hover:bg-premium-700'} text-white">
                                        ${user.isPremium ? 'Remove Premium' : 'Grant Premium'}
                                    </button>
                                    <button onclick="suspendUser('${user.id}')" 
                                            class="px-3 py-1 text-xs rounded bg-orange-600 hover:bg-orange-700 text-white">
                                        Suspend
                                    </button>
                                    <button onclick="deleteUser('${user.id}')" 
                                            class="px-3 py-1 text-xs rounded bg-red-600 hover:bg-red-700 text-white">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                document.getElementById('usersTableBody').innerHTML = 
                    `<tr><td colspan="6" class="p-3 text-center text-red-400">Error loading users: ${error.message}</td></tr>`;
            }
        }

        async function loadBots() {
            try {
                const response = await fetch('/api/admin/bots');
                const data = await response.json();
                
                if (data.success) {
                    const tbody = document.getElementById('botsTableBody');
                    tbody.innerHTML = '';
                    
                    data.bots.forEach(bot => {
                        const row = document.createElement('tr');
                        row.className = 'border-b border-gray-700';
                        row.innerHTML = `
                            <td class="p-3 text-white font-mono">${bot.id}</td>
                            <td class="p-3 text-white">${bot.ownerUsername || bot.ownerId}</td>
                            <td class="p-3">
                                <span class="px-2 py-1 rounded-full text-xs ${bot.status === 'online' ? 'bg-green-600' : 'bg-red-600'} text-white">
                                    ${bot.status}
                                </span>
                            </td>
                            <td class="p-3 text-white">${bot.uptime || 'N/A'}</td>
                            <td class="p-3 text-white">${bot.memory || 'N/A'}</td>
                            <td class="p-3 text-white">${bot.cpu || '0%'}</td>
                            <td class="p-3">
                                <div class="flex space-x-2">
                                    <button onclick="restartBot('${bot.id}')" 
                                            class="px-3 py-1 text-xs rounded bg-orange-600 hover:bg-orange-700 text-white">
                                        Restart
                                    </button>
                                    <button onclick="stopBot('${bot.id}')" 
                                            class="px-3 py-1 text-xs rounded bg-red-600 hover:bg-red-700 text-white">
                                        Stop
                                    </button>
                                    <button onclick="viewBotLogs('${bot.id}')" 
                                            class="px-3 py-1 text-xs rounded bg-electric-600 hover:bg-electric-700 text-white">
                                        Logs
                                    </button>
                                </div>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                document.getElementById('botsTableBody').innerHTML = 
                    `<tr><td colspan="7" class="p-3 text-center text-red-400">Error loading bots: ${error.message}</td></tr>`;
            }
        }

        // Form submission for adding users
        document.getElementById('addUserForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const userData = {
                userId: document.getElementById('newUserId').value,
                username: document.getElementById('newUsername').value,
                email: document.getElementById('newUserEmail').value,
                isPremium: document.getElementById('newUserPremium').checked
            };

            try {
                const response = await fetch('/api/admin/add-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(userData)
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('✅ User added successfully!', 'success');
                    closeModal('addUserModal');
                    document.getElementById('addUserForm').reset();
                    refreshStats();
                } else {
                    showNotification('❌ Failed to add user: ' + data.message, 'error');
                }
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        });

        // User Actions
        async function toggleUserPremium(userId, grantPremium) {
            try {
                const response = await fetch('/api/admin/toggle-premium', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, grantPremium })
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification(`✅ ${data.message}`, 'success');
                    loadUsers(); // Refresh the table
                    refreshStats();
                } else {
                    showNotification('❌ Failed: ' + data.message, 'error');
                }
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        }

        async function suspendUser(userId) {
            if (confirm(`Are you sure you want to suspend user ${userId}?`)) {
                try {
                    const response = await fetch('/api/admin/suspend-user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        showNotification('✅ User suspended successfully!', 'warning');
                        loadUsers();
                        refreshStats();
                    } else {
                        showNotification('❌ Failed: ' + data.message, 'error');
                    }
                } catch (error) {
                    showNotification('Error: ' + error.message, 'error');
                }
            }
        }

        async function deleteUser(userId) {
            if (confirm(`⚠️ Are you sure you want to permanently delete user ${userId}?\n\nThis will also stop their bots and cannot be undone.`)) {
                try {
                    const response = await fetch('/api/admin/delete-user', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        showNotification('✅ User deleted successfully!', 'warning');
                        loadUsers();
                        refreshStats();
                    } else {
                        showNotification('❌ Failed: ' + data.message, 'error');
                    }
                } catch (error) {
                    showNotification('Error: ' + error.message, 'error');
                }
            }
        }

        // Bot Actions
        async function restartBot(botId) {
            if (confirm(`Restart bot ${botId}?`)) {
                try {
                    const response = await fetch('/api/admin/restart-bot', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ botId })
                    });

                    const data = await response.json();
                    showNotification(data.success ? '✅ ' + data.message : '❌ ' + data.message, data.success ? 'success' : 'error');
                    loadBots();
                } catch (error) {
                    showNotification('Error: ' + error.message, 'error');
                }
            }
        }

        async function stopBot(botId) {
            if (confirm(`Stop bot ${botId}?`)) {
                try {
                    const response = await fetch('/api/admin/stop-bot', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ botId })
                    });

                    const data = await response.json();
                    showNotification(data.success ? '✅ ' + data.message : '❌ ' + data.message, data.success ? 'success' : 'error');
                    loadBots();
                } catch (error) {
                    showNotification('Error: ' + error.message, 'error');
                }
            }
        }

        async function restartAllBots() {
            if (confirm('⚠️ Are you sure you want to restart ALL bots?\n\nThis will temporarily disconnect all users.')) {
                try {
                    const response = await fetch('/api/admin/restart-all-bots', {
                        method: 'POST'
                    });

                    const data = await response.json();
                    alert(data.success ? '✅ ' + data.message : '❌ ' + data.message);
                    loadBots();
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }
        }

        function viewBotLogs(botId) {
            showNotification(`Opening logs for bot ${botId}...`, 'info');
            // This would show: Console output, Error messages, Performance metrics, Connection logs
        }

        // Stats refresh function
        async function refreshStats() {
            try {
                const response = await fetch('/api/admin/stats');
                const data = await response.json();
                
                if (data.success) {
                    const elements = {
                        totalUsers: document.getElementById('totalUsers'),
                        premiumUsers: document.getElementById('premiumUsers'),
                        activeBots: document.getElementById('activeBots'),
                        totalAdmins: document.getElementById('totalAdmins')
                    };
                    
                    // Update elements only if they exist
                    if (elements.totalUsers) elements.totalUsers.textContent = data.stats.totalUsers || 0;
                    if (elements.premiumUsers) elements.premiumUsers.textContent = data.stats.premiumUsers || 0;
                    if (elements.activeBots) elements.activeBots.textContent = data.stats.totalBots || 0;
                    if (elements.totalAdmins) elements.totalAdmins.textContent = data.stats.totalAdmins || 0;
                }
            } catch (error) {
                console.error('Failed to refresh stats:', error);
            }
        }

        // Payment Management Functions (keeping existing ones)
        function approvePayment() {
            promptForUserId('approve');
        }

        function revokePremium() {
            promptForUserId('revoke');
        }

        function pausePremium() {
            promptForUserId('pause');
        }

        function managePremiumUsers() {
            alert('Opening premium user management...\n\nUse "Manage Users" button to view all users with premium controls.');
            openUserListModal();
        }

        // Admin Management Functions (Master Admin Only)
        function addNewAdmin() {
            promptForAdminEmail('add');
        }

        function viewAllAdmins() {
            fetch('/api/admin/approved-admins')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let adminsList = 'Approved Admins:\n\n';
                        data.admins.forEach(admin => {
                            adminsList += `📧 ${admin.email}\n`;
                            adminsList += `🔰 Role: ${admin.role.toUpperCase()}\n`;
                            adminsList += `✅ Setup: ${admin.isSetup ? 'Complete' : 'Pending'}\n`;
                            adminsList += `👤 Added by: ${admin.approvedBy}\n`;
                            adminsList += `📅 Date: ${new Date(admin.approvedAt).toLocaleDateString()}\n\n`;
                        });
                        alert(adminsList || 'No admins found.');
                    } else {
                        alert(`❌ Failed to load admins: ${data.message}`);
                    }
                })
                .catch(error => alert('Error: ' + error));
        }

        function removeAdmin() {
            promptForAdminEmail('remove');
        }

        // System Functions (keeping existing ones)
        function systemSettings() {
            alert('Opening system settings...\n\nThis would allow configuration of:\n- General application settings\n- Rate limits\n- Feature toggles\n- Maintenance mode');
        }

        function lavalinkSettings() {
            alert('Opening Lavalink configuration...\n\nThis would manage:\n- Lavalink server endpoints\n- Load balancing settings\n- Audio quality settings\n- Connection pools');
        }

        function viewLogs() {
            alert('Opening system logs...\n\nThis would show:\n- Application logs\n- Error logs\n- Security events\n- Performance metrics');
        }

        function restartSystem() {
            if (confirm('Are you sure you want to restart the system?\n\nThis will temporarily make the service unavailable.')) {
                alert('System restart initiated...\n\nThis would:\n- Gracefully shutdown services\n- Restart application servers\n- Clear temporary data\n- Resume operations');
            }
        }

        function clearCache() {
            if (confirm('Clear all cached data?')) {
                alert('Cache cleared successfully!\n\nThis would:\n- Clear Redis cache\n- Remove temporary files\n- Reset session data\n- Improve performance');
            }
        }

        function backupSystem() {
            alert('Creating system backup...\n\nThis would:\n- Backup database\n- Archive configuration files\n- Save user data\n- Store in secure location');
        }

        function systemInfo() {
            alert('System Information:\n\n' +
                  'Server: PremiumPlus Music Bot Hosting\n' +
                  'Version: 2.0.0\n' +
                  'Uptime: 7 days, 14 hours\n' +
                  'Memory: 2.1GB / 8GB\n' +
                  'CPU: 23%\n' +
                  'Active Users: <%= stats?.totalUsers || 0 %>\n' +
                  'Active Bots: <%= stats?.totalBots || 0 %>');
        }

        function monitorBots() {
            alert('Opening bot monitoring dashboard...\n\nUse "View All Bots" for detailed bot management with restart/stop controls.');
            openBotListModal();
        }

        // Auto-refresh stats every 30 seconds
        setInterval(refreshStats, 30000);

        // Initial load
        document.addEventListener('DOMContentLoaded', function() {
            refreshStats();
        });

        // Search functionality
        document.getElementById('userSearch')?.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('#usersTableBody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });

        // Custom Modal System to replace ugly browser prompts
        function showCustomPrompt(title, placeholder, callback) {
            const modalHtml = `
                <div id="customModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="closeCustomModal()">
                    <div class="modal-glass p-6 max-w-md w-full mx-4" onclick="event.stopPropagation()">
                        <h3 class="text-xl font-bold text-gray-800 mb-4">${title}</h3>
                        <input type="text" id="customInput" placeholder="${placeholder}" 
                               class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-blue-500 focus:outline-none mb-4 text-gray-800">
                        <div class="flex space-x-3">
                            <button onclick="confirmCustomPrompt('${callback}')" 
                                    class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                                <i class="fas fa-check mr-2"></i>OK
                            </button>
                            <button onclick="closeCustomModal()" 
                                    class="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors">
                                <i class="fas fa-times mr-2"></i>Cancel
                            </button>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            document.getElementById('customInput').focus();
        }

        function closeCustomModal() {
            const modal = document.getElementById('customModal');
            if (modal) modal.remove();
        }

        function confirmCustomPrompt(callback) {
            const input = document.getElementById('customInput').value;
            closeCustomModal();
            if (input && callback) {
                window[callback](input);
            }
        }

        // Enhanced prompt functions
        function promptForUserId(action) {
            showCustomPrompt('Enter User ID', 'User ID (e.g. 123456789)', `handleUserAction_${action}`);
        }

        function promptForPlan() {
            showCustomPrompt('Select Plan', 'Plan type (monthly/quarterly/annual)', 'handlePlanSelection');
        }

        function promptForAdminEmail(action) {
            showCustomPrompt('Admin Email', 'admin@example.com', `handleAdminAction_${action}`);
        }

        // Action handlers
        window.handleUserAction_approve = function(userId) {
            promptForPlan();
            window.currentUserId = userId;
        };

        window.handlePlanSelection = function(plan) {
            if (window.currentUserId) {
                approvePaymentForUser(window.currentUserId, plan);
                delete window.currentUserId;
            }
        };

        window.handleUserAction_revoke = function(userId) {
            revokeUserPremium(userId);
        };

        window.handleUserAction_pause = function(userId) {
            pauseUserPremium(userId);
        };

        window.handleAdminAction_add = function(email) {
            addAdminByEmail(email);
        };

        window.handleAdminAction_remove = function(email) {
            removeAdminByEmail(email);
        };

        // Implementation functions for the new modal system
        function approvePaymentForUser(userId, plan) {
            fetch('/api/admin/approve-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, plan })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`✅ ${data.message}\n\nUser will receive premium access immediately.`);
                    refreshStats();
                } else {
                    alert(`❌ Failed to approve payment: ${data.message}`);
                }
            })
            .catch(error => {
                alert(`❌ Error: ${error.message}`);
            });
        }

        function revokeUserPremium(userId) {
            if (confirm(`Are you sure you want to revoke premium for user ${userId}?`)) {
                fetch('/api/admin/revoke-premium', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`✅ ${data.message}\n\nUser's bot will be stopped and premium features disabled.`);
                        refreshStats();
                    } else {
                        alert(`❌ Failed to revoke premium: ${data.message}`);
                    }
                })
                .catch(error => alert('Error: ' + error));
            }
        }

        function pauseUserPremium(userId) {
            fetch('/api/admin/pause-premium', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`✅ ${data.message}\n\nUser's subscription is temporarily paused.`);
                    refreshStats();
                } else {
                    alert(`❌ Failed to pause premium: ${data.message}`);
                }
            })
            .catch(error => alert('Error: ' + error));
        }

        function addAdminByEmail(email) {
            if (email && email.includes('@')) {
                fetch('/api/admin/add-admin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`✅ ${data.message}\n\nAdmin invitation sent successfully.`);
                        refreshStats();
                    } else {
                        alert(`❌ Failed to add admin: ${data.message}`);
                    }
                })
                .catch(error => alert('Error: ' + error));
            } else {
                alert('Please enter a valid email address.');
            }
        }

        function removeAdminByEmail(email) {
            if (email && email.includes('@')) {
                if (confirm(`Are you sure you want to remove admin access for ${email}?`)) {
                    fetch('/api/admin/remove-admin', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(`✅ ${data.message}\n\nAdmin access revoked successfully.`);
                            refreshStats();
                        } else {
                            alert(`❌ Failed to remove admin: ${data.message}`);
                        }
                    })
                    .catch(error => alert('Error: ' + error));
                }
            } else {
                alert('Please enter a valid email address.');
            }
        }

        // Real-time monitoring system
        let monitoringActive = false;
        let sseConnection = null;

        function startRealtimeMonitoring() {
            if (monitoringActive) return;
            
            monitoringActive = true;
            console.log('🟢 Starting real-time monitoring...');
            
            // Server-Sent Events for real-time updates
            sseConnection = new EventSource('/api/monitoring/sse/dashboard');
            
            sseConnection.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    updateDashboardStats(data);
                } catch (error) {
                    console.error('SSE data parsing error:', error);
                }
            };
            
            sseConnection.onerror = function(event) {
                console.error('SSE connection error:', event);
                // Attempt to reconnect after 5 seconds
                setTimeout(() => {
                    if (sseConnection.readyState === EventSource.CLOSED) {
                        startRealtimeMonitoring();
                    }
                }, 5000);
            };
            
            // Fallback polling every 10 seconds
            setInterval(fetchDashboardStats, 10000);
        }

        function stopRealtimeMonitoring() {
            monitoringActive = false;
            if (sseConnection) {
                sseConnection.close();
                sseConnection = null;
            }
        }

        async function fetchDashboardStats() {
            try {
                const response = await fetch('/api/monitoring/dashboard/realtime');
                const result = await response.json();
                
                if (result.success) {
                    updateDashboardStats(result.data);
                }
            } catch (error) {
                console.error('Failed to fetch dashboard stats:', error);
            }
        }

        function updateDashboardStats(data) {
            // Update database stats
            if (data.database) {
                document.getElementById('totalUsers').textContent = data.database.totalUsers || 0;
                document.getElementById('premiumUsers').textContent = data.database.premiumUsers || 0;
                document.getElementById('activeBots').textContent = data.database.activeBots || 0;
                document.getElementById('totalAdmins').textContent = data.database.totalAdmins || 0;
            }
            
            // Update system performance
            if (data.system) {
                const cpuUsage = Math.round(data.system.cpu);
                const ramUsage = Math.round(data.system.memory);
                
                document.getElementById('cpuUsage').textContent = cpuUsage + '%';
                document.getElementById('ramUsage').textContent = ramUsage + '%';
                
                // Update progress bars
                document.getElementById('cpuBar').style.width = cpuUsage + '%';
                document.getElementById('ramBar').style.width = ramUsage + '%';
                
                // Change colors based on usage
                const cpuBar = document.getElementById('cpuBar');
                const ramBar = document.getElementById('ramBar');
                
                if (cpuUsage > 80) {
                    cpuBar.className = 'h-full bg-red-500 transition-all duration-500';
                } else if (cpuUsage > 50) {
                    cpuBar.className = 'h-full bg-yellow-500 transition-all duration-500';
                } else {
                    cpuBar.className = 'h-full bg-electric-500 transition-all duration-500';
                }
                
                if (ramUsage > 80) {
                    ramBar.className = 'h-full bg-red-500 transition-all duration-500';
                } else if (ramUsage > 50) {
                    ramBar.className = 'h-full bg-yellow-500 transition-all duration-500';
                } else {
                    ramBar.className = 'h-full bg-purple-500 transition-all duration-500';
                }
            }
            
            // Add timestamp indicator
            const now = new Date();
            const timeStr = now.toLocaleTimeString();
            
            // Update last updated indicator if it exists
            let lastUpdated = document.getElementById('lastUpdated');
            if (!lastUpdated) {
                // Create indicator if it doesn't exist
                lastUpdated = document.createElement('div');
                lastUpdated.id = 'lastUpdated';
                lastUpdated.className = 'fixed bottom-4 right-4 text-xs text-white/60 bg-black/20 px-2 py-1 rounded';
                document.body.appendChild(lastUpdated);
            }
            lastUpdated.textContent = `Last updated: ${timeStr}`;
        }

        // Initialize monitoring when page loads
        document.addEventListener('DOMContentLoaded', function() {
            startRealtimeMonitoring();
            
            // Add electric effects to cards
            const cards = document.querySelectorAll('.glass-card');
            cards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.boxShadow = '0 0 30px rgba(59, 130, 246, 0.5)';
                });
                
                card.addEventListener('mouseleave', function() {
                    this.style.boxShadow = '0 25px 45px rgba(0, 0, 0, 0.15)';
                });
            });
        });

        // Clean up when page unloads
        window.addEventListener('beforeunload', function() {
            stopRealtimeMonitoring();
        });
    </script>

        <!-- Hosted Bots Table -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6 relative z-10">
            <div class="glass-effect rounded-lg p-5 mb-10" id="hostedBotsPanel">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-2xl font-bold">Hosted Bots</h2>
                    <div class="flex gap-2 items-center">
                        <button id="refreshBots" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded text-sm font-semibold">Refresh</button>
                        <span id="botLastUpdated" class="text-xs text-white/60"></span>
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full text-sm" id="botsTable">
                        <thead class="bg-white/10">
                            <tr>
                                <th class="px-3 py-2 text-left font-medium">User ID</th>
                                <th class="px-3 py-2 text-left font-medium">Bot Name</th>
                                <th class="px-3 py-2 text-left font-medium">Status</th>
                                <th class="px-3 py-2 text-left font-medium">CPU%</th>
                                <th class="px-3 py-2 text-left font-medium">Mem (MB)</th>
                                <th class="px-3 py-2 text-left font-medium">Guilds</th>
                                <th class="px-3 py-2 text-left font-medium">Users</th>
                                <th class="px-3 py-2 text-left font-medium">Restarts</th>
                                <th class="px-3 py-2 text-left font-medium">Uptime</th>
                                <th class="px-3 py-2 text-left font-medium">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="botsTableBody" class="divide-y divide-white/10">
                            <tr><td colspan="10" class="px-3 py-3 text-center text-white/60">Loading...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <script>
            async function fetchBots(){
                try {
                    const res = await fetch('/api/admin/bots');
                    const data = await res.json();
                    const body = document.getElementById('botsTableBody');
                    if(!data.success){
                        body.innerHTML = `<tr><td colspan="10" class="px-3 py-3 text-center text-red-400">Failed: ${data.message||'error'}</td></tr>`;
                        return;
                    }
                    const bots = data.bots || [];
                        if(!bots.length){
                            body.innerHTML = '<tr><td colspan="10" class="px-3 py-3 text-center text-white/60">No bots</td></tr>';
                            return;
                        }
                        body.innerHTML = bots.map(b => {
                            const status = b.pm2Status?.status || 'unknown';
                            const cpu = b.pm2Status?.cpu ?? 0;
                            const mem = b.pm2Status?.memory ?? 0;
                            const guilds = b.discordStats?.guildCount ?? 0;
                            const users = b.discordStats?.userCount ?? 0;
                            const restarts = b.pm2Status?.restarts ?? 0;
                            const up = b.pm2Status?.uptime ? formatDuration(Date.now() - b.pm2Status.uptime) : '-';
                            return `<tr>
                                <td class="px-3 py-2 font-mono">${b.userId}</td>
                                <td class="px-3 py-2">${b.botName||''}</td>
                                <td class="px-3 py-2"><span class="px-2 py-1 rounded text-xs ${status==='online'?'bg-green-600':'bg-red-600'}">${status}</span></td>
                                <td class="px-3 py-2">${cpu}</td>
                                <td class="px-3 py-2">${mem}</td>
                                <td class="px-3 py-2">${guilds}</td>
                                <td class="px-3 py-2">${users}</td>
                                <td class="px-3 py-2">${restarts}</td>
                                <td class="px-3 py-2">${up}</td>
                                <td class="px-3 py-2 space-x-2">
                                    <button onclick="restartBot('${b.userId}')" class="px-2 py-1 bg-indigo-600 hover:bg-indigo-700 rounded text-xs">Restart</button>
                                </td>
                            </tr>`;
                        }).join('');
                        document.getElementById('botLastUpdated').textContent = 'Updated ' + new Date().toLocaleTimeString();
                } catch (e) {
                    document.getElementById('botsTableBody').innerHTML = '<tr><td colspan="10" class="px-3 py-3 text-center text-red-400">Error</td></tr>';
                }
            }
            function formatDuration(ms){ if(!ms||ms<0) return '-'; const s=Math.floor(ms/1000); const h=Math.floor(s/3600); const m=Math.floor((s%3600)/60); return h+'h '+m+'m'; }
            async function restartBot(userId){
                if(!confirm('Restart bot for user '+userId+'?')) return;
                const r = await fetch('/api/admin/bots/'+userId+'/restart', { method:'POST' });
                const j = await r.json();
                if(!j.success) alert('Restart failed'); else fetchBots();
            }
            document.getElementById('refreshBots').addEventListener('click', fetchBots);
            fetchBots();
            setInterval(fetchBots, 10000);
        </script>

    <!-- Custom Modal Container will be inserted here by JavaScript -->

</body>
</html>
