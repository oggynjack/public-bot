<%- include('../layouts/header', { title: title || 'Control Panel' }) %>

<style>
/* Electric Blue Animated Waves Background */
body {
    background: linear-gradient(-45deg, #1e3a8a, #1e40af, #2563eb, #3b82f6, #60a5fa, #93c5fd, #1e3a8a, #2563eb);
    background-size: 400% 400%;
    animation: electricWaves 8s ease infinite;
    min-height: 100vh;
    font-family: 'Poppins', sans-serif;
    position: relative;
    overflow-x: hidden;
}

/* Electric wave animation */
@keyframes electricWaves {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

/* Wave overlay effect */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(30, 58, 138, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, rgba(37, 99, 235, 0.2) 0%, transparent 50%);
    animation: waveMove 12s ease-in-out infinite;
    pointer-events: none;
    z-index: 0;
}

@keyframes waveMove {
    0%, 100% { 
        transform: translate(0px, 0px) scale(1); 
    }
    33% { 
        transform: translate(30px, -30px) scale(1.1); 
    }
    66% { 
        transform: translate(-20px, 20px) scale(0.9); 
    }
}

/* Electric particles */
.electric-particle {
    position: fixed;
    border-radius: 50%;
    pointer-events: none;
    opacity: 0.6;
    animation: electricFloat 6s ease-in-out infinite;
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.8);
    z-index: 1;
}

@keyframes electricFloat {
    0%, 100% {
        transform: translateY(0) translateX(0);
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.8);
    }
    25% {
        transform: translateY(-20px) translateX(10px);
        box-shadow: 0 0 20px rgba(96, 165, 250, 1);
    }
    50% {
        transform: translateY(-40px) translateX(-5px);
        box-shadow: 0 0 15px rgba(147, 197, 253, 0.9);
    }
    75% {
        transform: translateY(-20px) translateX(-10px);
        box-shadow: 0 0 25px rgba(59, 130, 246, 1);
    }
}

/* Glass effect cards */
.glass-card {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.25);
    border-radius: 16px;
    box-shadow: 0 25px 45px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
}

.glass-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 35px 60px rgba(0, 0, 0, 0.25);
    background: rgba(255, 255, 255, 0.2);
}

.electric-glow {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.4);
}

/* Status indicator animations */
.status-pulse {
    animation: statusPulse 2s ease-in-out infinite;
}

@keyframes statusPulse {
    0%, 100% { 
        opacity: 1; 
        transform: scale(1);
    }
    50% { 
        opacity: 0.7; 
        transform: scale(1.1);
    }
}

/* Progress bars */
.progress-bar {
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    overflow: hidden;
    margin-top: 8px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
    border-radius: 2px;
    transition: width 0.5s ease;
    position: relative;
}

.progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: progressShine 2s ease-in-out infinite;
}

@keyframes progressShine {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

/* Button enhancements */
.electric-button {
    background: linear-gradient(135deg, #3b82f6, #1e40af);
    border: 1px solid rgba(59, 130, 246, 0.5);
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    transition: all 0.3s ease;
}

.electric-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
}
</style>

<div class="min-h-screen py-6 relative z-10">
    <!-- Decorative particles removed for cleaner professional look -->
    
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-white">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-3xl font-bold text-white electric-glow">Bot Control Panel</h1>
            <div class="flex items-center space-x-4">
                <div class="flex items-center space-x-2">
                    <div class="w-3 h-3 rounded-full <%= bot.isOnline ? 'bg-green-400' : 'bg-red-400' %> status-pulse"></div>
                    <span class="text-sm text-white/80" id="botStatusText">
                        <%= bot.isOnline ? 'Online' : 'Offline' %>
                    </span>
                </div>
                <span class="text-sm text-white/60">|</span>
                <span class="text-sm text-white/80">
                    <% if (subscription.plan === 'Premium') { %>
                        ✨ Premium Plan
                    <% } else { %>
                        🆓 Free Plan
                    <% } %>
                </span>
            </div>
        </div>

        <!-- Bot Status Overview -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <!-- Bot Status -->
            <div class="glass-card p-4">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-xs text-white/70 font-medium">Bot Status</p>
                        <p class="text-xl font-bold <%= bot.isOnline ? 'text-green-300' : 'text-red-300' %>" id="botStatus">
                            <%= bot.isOnline ? 'Online' : 'Offline' %>
                        </p>
                        <div class="progress-bar mt-2">
                            <div class="progress-fill" style="width: 0%" id="statusBar"></div>
                        </div>
                    </div>
                    <div class="text-2xl">
                        <span id="statusEmoji"><%= bot.isOnline ? '' : '' %></span>
                    </div>
                </div>
            </div>

            <!-- Server Count -->
            <div class="glass-card p-4">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-xs text-white/70 font-medium">Servers</p>
                        <p class="text-xl font-bold text-blue-300" id="serverCount"><%= bot.serverCount %></p>
                        <div class="progress-bar mt-2">
                            <div class="progress-fill" style="width: 0%" id="serverBar"></div>
                        </div>
                    </div>
                    <div class="text-2xl"></div>
                </div>
            </div>

            <!-- User Count -->
            <div class="glass-card p-4">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-xs text-white/70 font-medium">Total Users</p>
                        <p class="text-xl font-bold text-purple-300" id="userCount"><%= bot.userCount %></p>
                        <div class="progress-bar mt-2">
                            <div class="progress-fill" style="width: 0%" id="userBar"></div>
                        </div>
                    </div>
                    <div class="text-2xl"></div>
                </div>
            </div>

            <!-- Uptime -->
            <div class="glass-card p-4">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-xs text-white/70 font-medium">Uptime</p>
                        <p class="text-xl font-bold text-yellow-300" id="uptimeDisplay">
                            <% if (bot.uptime) { %>
                                <%= Math.floor((Date.now() - bot.uptime) / (1000 * 60 * 60)) %>h
                            <% } else { %>
                                --
                            <% } %>
                        </p>
                        <div class="progress-bar mt-2">
                            <div class="progress-fill" style="width: 75%" id="uptimeBar"></div>
                        </div>
                    </div>
                    <div class="text-2xl"></div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Bot Controls -->
            <div class="glass-card p-5">
                <h2 class="text-xl font-bold text-white mb-4 electric-glow">Bot Controls</h2>
                
                <div class="space-y-3">
                    <!-- Start/Stop/Restart Buttons -->
                    <div class="flex flex-wrap gap-2">
                        <% if (bot.isOnline) { %>
                            <button onclick="stopBot()" class="electric-button bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-semibold transition-all flex items-center gap-2 text-sm">
                                Stop Bot
                            </button>
                            <button onclick="restartBot()" class="electric-button bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg font-semibold transition-all flex items-center gap-2 text-sm">
                                Restart Bot
                            </button>
                        <% } else { %>
                            <button onclick="startBot()" class="electric-button bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-all flex items-center gap-2 text-sm">
                                Start Bot
                            </button>
                        <% } %>
                        <button onclick="checkStatus()" class="electric-button bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-all flex items-center gap-2 text-sm">
                            Check Status
                        </button>
                    </div>

                    <!-- Quick Actions removed (were placeholder / fake) -->
                </div>
            </div>

            <!-- Bot Settings -->
            <div class="glass-card p-5">
                <h2 class="text-xl font-bold text-white mb-4 electric-glow">Bot Settings</h2>
                
                <form id="settingsForm" class="space-y-4">
                    <!-- Bot Prefix -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Command Prefix</label>
                        <input type="text" name="prefix" value="<%= settings.prefix %>" 
                               class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" 
                               maxlength="5">
                    </div>

                    <!-- Default Volume -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Default Volume</label>
                        <div class="flex items-center gap-3">
                            <input type="range" name="volume" value="<%= settings.volume %>" min="1" max="100" 
                                   class="flex-1 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer">
                            <span id="volumeValue" class="text-white font-medium w-10"><%= settings.volume %>%</span>
                        </div>
                    </div>

                    <!-- Toggle Settings -->
                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <label class="text-sm font-medium text-gray-300">Auto-play Similar Songs</label>
                            <input type="checkbox" name="autoPlay" <%= settings.autoPlay ? 'checked' : '' %>
                                   class="w-5 h-5 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500">
                        </div>
                        
                        <!-- DJ Mode removed (placeholder) -->
                        
                        <div class="flex items-center justify-between">
                            <label class="text-sm font-medium text-gray-300">Join Voice Notifications</label>
                            <input type="checkbox" name="joinMessage" <%= settings.joinMessage ? 'checked' : '' %>
                                   class="w-5 h-5 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500">
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <label class="text-sm font-medium text-gray-300">Leave Voice Notifications</label>
                            <input type="checkbox" name="leaveMessage" <%= settings.leaveMessage ? 'checked' : '' %>
                                   class="w-5 h-5 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500">
                        </div>
                    </div>

                    <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                        💾 Save Settings
                    </button>
                </form>
            </div>
        </div>

        <!-- Bot Customization -->
        <div class="mt-6 glass-card p-5">
            <h2 class="text-xl font-bold text-white mb-4 electric-glow">Bot Customization</h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Bot Profile -->
                <div>
                    <h3 class="text-lg font-semibold text-white mb-4">Profile Settings</h3>
                    <form id="profileForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Bot Username</label>
                            <input type="text" name="username" value="<%= bot.name %>" 
                                   class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" 
                                   maxlength="32">
                            <p class="text-xs text-gray-400 mt-1">Changes may take time to apply</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Avatar URL</label>
                            <input type="url" name="avatar" value="<%= bot.avatar || '' %>" 
                                   class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" 
                                   placeholder="https://example.com/avatar.png">
                            <p class="text-xs text-gray-400 mt-1">Must be a valid image URL</p>
                        </div>

                        <button type="submit" class="w-full bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                            Update Profile
                        </button>
                    </form>
                </div>

                <!-- Bot Presence -->
                <div>
                    <h3 class="text-lg font-semibold text-white mb-4">Presence Settings</h3>
                    <form id="presenceForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Status</label>
                            <select name="status" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500">
                                <option value="online" <%= (bot.presence && bot.presence.status === 'online') ? 'selected' : '' %>>🟢 Online</option>
                                <option value="idle" <%= (bot.presence && bot.presence.status === 'idle') ? 'selected' : '' %>>🟡 Idle</option>
                                <option value="dnd" <%= (bot.presence && bot.presence.status === 'dnd') ? 'selected' : '' %>>🔴 Do Not Disturb</option>
                                <option value="invisible" <%= (bot.presence && bot.presence.status === 'invisible') ? 'selected' : '' %>>⚫ Invisible</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Activity Type</label>
                            <select name="activityType" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500">
                                <option value="0" <%= (bot.presence && bot.presence.activities && bot.presence.activities[0] && bot.presence.activities[0].type === 0) ? 'selected' : '' %>>Playing</option>
                                <option value="1" <%= (bot.presence && bot.presence.activities && bot.presence.activities[0] && bot.presence.activities[0].type === 1) ? 'selected' : '' %>>Streaming</option>
                                <option value="2" <%= (bot.presence && bot.presence.activities && bot.presence.activities[0] && bot.presence.activities[0].type === 2) ? 'selected' : '' %>>Listening to</option>
                                <option value="3" <%= (bot.presence && bot.presence.activities && bot.presence.activities[0] && bot.presence.activities[0].type === 3) ? 'selected' : '' %>>Watching</option>
                                <option value="5" <%= (bot.presence && bot.presence.activities && bot.presence.activities[0] && bot.presence.activities[0].type === 5) ? 'selected' : '' %>>Competing in</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Activity Text</label>
                            <input type="text" name="activityName" 
                                   value="<%= (bot.presence && bot.presence.activities && bot.presence.activities[0]) ? bot.presence.activities[0].name : '' %>" 
                                   class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" 
                                   placeholder="your awesome music" maxlength="128">
                        </div>

                        <div id="streamingUrl" style="display: none;">
                            <label class="block text-sm font-medium text-gray-300 mb-2">Streaming URL</label>
                            <input type="url" name="streamingUrl" 
                                   value="<%= (bot.presence && bot.presence.activities && bot.presence.activities[0]) ? bot.presence.activities[0].url || '' : '' %>" 
                                   class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" 
                                   placeholder="https://twitch.tv/yourstream">
                        </div>

                        <button type="submit" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                            Update Presence
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Bot Information -->
        <div class="mt-6 glass-card p-5">
            <h2 class="text-xl font-bold text-white mb-4 electric-glow">Bot Information</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div>
                    <p class="text-sm text-gray-400">Bot Name</p>
                    <p class="text-lg font-semibold text-white"><%= bot.name %></p>
                </div>
                
                <div>
                    <p class="text-sm text-gray-400">Application ID</p>
                    <p class="text-lg font-mono text-gray-300"><%= bot.applicationId %></p>
                </div>
                
                <div>
                    <p class="text-sm text-gray-400">Last Status Check</p>
                    <p class="text-lg text-gray-300">Just now</p>
                </div>
                
                <div>
                    <p class="text-sm text-gray-400">Version</p>
                    <p class="text-lg text-gray-300">PremiumPlus v2.0</p>
                </div>
            </div>
        </div>

    <!-- Recent Activity removed (was fake static content) -->
    </div>
</div>

<!-- Bot Credentials Management -->
<div class="mt-6 glass-card p-5">
    <h2 class="text-xl font-bold text-white mb-4 electric-glow">Bot Credentials</h2>
    <form id="credentialsForm" class="space-y-4">
        <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Application ID</label>
            <input type="text" name="applicationId" value="<%= bot.applicationId || '' %>" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" required>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Bot Token (will be encrypted)</label>
            <input type="password" name="token" value="" placeholder="Paste new token" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500" required>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">Bot Name (optional)</label>
            <input type="text" name="botName" value="<%= bot.name %>" class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500">
        </div>
        <div class="flex gap-3">
            <button type="submit" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors">Save & Restart</button>
            <button type="button" id="deleteBotBtn" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors">Remove Bot</button>
        </div>
    </form>
    <p class="text-xs text-white/60 mt-2">Updating credentials will restart your bot. Token is stored encrypted.</p>
</div>

<!-- JavaScript -->
<script>
// Volume slider update
document.querySelector('input[name="volume"]').addEventListener('input', function(e) {
    document.getElementById('volumeValue').textContent = e.target.value + '%';
});

// Bot control functions
async function startBot() {
    try {
        showLoading('Starting bot...');
        const response = await fetch('/api/bot/start', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
            showNotification('Bot started successfully!', 'success');
            setTimeout(() => location.reload(), 2000);
        } else {
            showNotification('Failed to start bot: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error starting bot', 'error');
    }
}

async function stopBot() {
    try {
        showLoading('Stopping bot...');
        const response = await fetch('/api/bot/stop', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
            showNotification('Bot stopped successfully!', 'success');
            setTimeout(() => location.reload(), 2000);
        } else {
            showNotification('Failed to stop bot: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error stopping bot', 'error');
    }
}

async function restartBot() {
    try {
        showLoading('Restarting bot...');
        const response = await fetch('/api/bot/restart', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
            showNotification('Bot restarted successfully!', 'success');
            setTimeout(() => location.reload(), 3000);
        } else {
            showNotification('Failed to restart bot: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error restarting bot', 'error');
    }
}

async function checkStatus() {
    try {
        showLoading('Checking status...');
        const response = await fetch('/api/bot/status');
        const result = await response.json();
        
        if (result.success) {
            showNotification(`Bot is ${result.status}`, 'info');
            setTimeout(() => location.reload(), 1000);
        } else {
            showNotification('Failed to check status', 'error');
        }
    } catch (error) {
        showNotification('Error checking status', 'error');
    }
}

// Settings form submission
document.getElementById('settingsForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const settings = {};
    
    for (let [key, value] of formData.entries()) {
        if (e.target.elements[key].type === 'checkbox') {
            settings[key] = e.target.elements[key].checked;
        } else {
            settings[key] = value;
        }
    }
    
    try {
        showLoading('Saving settings...');
        const response = await fetch('/api/bot/settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('Settings saved successfully!', 'success');
        } else {
            showNotification('Failed to save settings: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error saving settings', 'error');
    }
});

// Profile form submission
document.getElementById('profileForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const profile = {};
    
    for (let [key, value] of formData.entries()) {
        profile[key] = value;
    }
    
    try {
        showLoading('Updating profile...');
        const response = await fetch('/api/bot/update-profile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(profile)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('Profile updated successfully!', 'success');
            setTimeout(() => location.reload(), 2000);
        } else {
            showNotification('Failed to update profile: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error updating profile', 'error');
    }
});

// Presence form submission
document.getElementById('presenceForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const presence = {};
    
    for (let [key, value] of formData.entries()) {
        if (key === 'activityType') {
            presence[key] = parseInt(value);
        } else {
            presence[key] = value;
        }
    }
    
    try {
        showLoading('Updating presence...');
        const response = await fetch('/api/bot/update-presence', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(presence)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('Presence updated successfully!', 'success');
        } else {
            showNotification('Failed to update presence: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('Error updating presence', 'error');
    }
});

// Activity type change handler
document.querySelector('select[name="activityType"]').addEventListener('change', function(e) {
    const streamingUrlDiv = document.getElementById('streamingUrl');
    if (e.target.value === '1') { // Streaming
        streamingUrlDiv.style.display = 'block';
    } else {
        streamingUrlDiv.style.display = 'none';
    }
});

// Initialize streaming URL visibility
document.addEventListener('DOMContentLoaded', function() {
    const activityTypeSelect = document.querySelector('select[name="activityType"]');
    const streamingUrlDiv = document.getElementById('streamingUrl');
    
    if (activityTypeSelect.value === '1') {
        streamingUrlDiv.style.display = 'block';
    }
});

// Quick action placeholder functions removed

// Utility functions
function showLoading(message) {
    // You can implement a loading spinner here
    console.log('Loading:', message);
}

function showNotification(message, type = 'info') {
    // Create and show notification
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-semibold ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 
        type === 'warning' ? 'bg-yellow-600' : 
        'bg-blue-600'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// Auto-refresh status every 30 seconds
setInterval(async () => {
    try {
        const response = await fetch('/api/bot/status');
        const result = await response.json();
        
        if (result.success) {
            // Update status indicator without full page reload
            const statusIndicator = document.querySelector('.w-3.h-3.rounded-full');
            const statusText = statusIndicator.nextElementSibling;
            
            if (result.status === 'online') {
                statusIndicator.className = 'w-3 h-3 rounded-full bg-green-500 animate-pulse';
                statusText.textContent = 'Online';
            } else {
                statusIndicator.className = 'w-3 h-3 rounded-full bg-red-500 animate-pulse';
                statusText.textContent = 'Offline';
            }
        }
    } catch (error) {
        console.log('Status check failed:', error);
    }
}, 30000);

// Real-time bot monitoring system
let botMonitoringActive = false;
let botSSEConnection = null;

function startBotRealtimeMonitoring() {
    if (botMonitoringActive) return;
    
    botMonitoringActive = true;
    console.log('🟢 Starting real-time bot monitoring...');
    
    // Server-Sent Events for real-time updates
    botSSEConnection = new EventSource('/api/monitoring/sse/dashboard');
    
    botSSEConnection.onopen = function(event) {
        console.log('✅ SSE connection established');
    };
    
    botSSEConnection.onmessage = function(event) {
        try {
            console.log('📨 SSE data received:', event.data);
            const data = JSON.parse(event.data);
            updateBotStats(data);
        } catch (error) {
            console.error('❌ Bot SSE data parsing error:', error);
        }
    };
    
    botSSEConnection.onerror = function(event) {
        console.error('❌ Bot SSE connection error:', event);
        console.log('SSE readyState:', botSSEConnection.readyState);
        
        // Attempt to reconnect after 5 seconds
        setTimeout(() => {
            if (botSSEConnection && botSSEConnection.readyState === EventSource.CLOSED) {
                console.log('🔄 Attempting to reconnect SSE...');
                botMonitoringActive = false;
                startBotRealtimeMonitoring();
            }
        }, 5000);
    };
    
    // Fallback polling every 10 seconds
    setInterval(fetchBotStats, 10000);
}

function stopBotRealtimeMonitoring() {
    botMonitoringActive = false;
    if (botSSEConnection) {
        botSSEConnection.close();
        botSSEConnection = null;
    }
}

async function fetchBotStats() {
    try {
        const response = await fetch('/api/monitoring/dashboard/realtime');
        const result = await response.json();
        
        if (result.success && result.data.bot) {
            updateBotStats(result.data);
        }
    } catch (error) {
        console.error('Failed to fetch bot stats:', error);
    }
}

function updateBotStats(data) {
    // Handle different data structures for admin vs user
    let botData = data.bot || data.bots?.[0] || data;
    let systemData = data.system;
    
    // If this is admin data structure, use the first bot or create fallback
    if (data.system && data.bots) {
        // Admin view - use aggregated data
        systemData = data.system;
        if (data.bots && data.bots.length > 0) {
            botData = data.bots[0];
        } else {
            // Create fallback bot data from system info
            botData = {
                pm2Status: { status: 'online' },
                discordStats: {
                    guildCount: data.database?.totalBots || 0,
                    userCount: data.database?.totalUsers || 0
                },
                uptime: systemData?.uptime || 0,
                memoryUsage: systemData?.memory?.used || 0,
                cpuUsage: systemData?.cpu || 0
            };
        }
    }
    
    // Update status indicator
    const statusIndicator = document.querySelector('.status-pulse');
    const statusText = document.getElementById('botStatusText');
    const statusDisplay = document.getElementById('botStatus');
    const statusEmoji = document.getElementById('statusEmoji');
    const statusBar = document.getElementById('statusBar');
    
    if (statusIndicator && statusText && statusDisplay && statusEmoji && statusBar) {
        if (botData?.pm2Status && botData.pm2Status.status === 'online') {
            statusIndicator.className = 'w-3 h-3 rounded-full bg-green-400 status-pulse';
            statusText.textContent = 'Online';
            statusDisplay.textContent = 'Online';
            statusDisplay.className = 'text-xl font-bold text-green-300';
            statusEmoji.textContent = '🟢';
            statusBar.style.width = '100%';
        } else {
            statusIndicator.className = 'w-3 h-3 rounded-full bg-red-400 status-pulse';
            statusText.textContent = 'Offline';
            statusDisplay.textContent = 'Offline';
            statusDisplay.className = 'text-xl font-bold text-red-300';
            statusEmoji.textContent = '🔴';
            statusBar.style.width = '0%';
        }
    }
    
    // Update server and user counts
    if (botData?.discordStats || data.database) {
        const serverCount = document.getElementById('serverCount');
        const userCount = document.getElementById('userCount');
        const serverBar = document.getElementById('serverBar');
        const userBar = document.getElementById('userBar');
        
        if (serverCount && userCount && serverBar && userBar) {
            const guildCount = botData?.discordStats?.guildCount || data.database?.totalBots || 0;
            const totalUsers = botData?.discordStats?.userCount || data.database?.totalUsers || 0;
            
            serverCount.textContent = guildCount;
            userCount.textContent = totalUsers;
            
            // Update progress bars
            const serverPercent = Math.min(guildCount * 2, 100);
            const userPercent = Math.min((totalUsers / 1000) * 100, 100);
            
            serverBar.style.width = serverPercent + '%';
            userBar.style.width = userPercent + '%';
        }
    }
    
    // Update uptime - handle both bot uptime and system uptime
    const uptimeData = botData?.pm2Status?.uptime || systemData?.uptime || botData?.uptime;
    if (uptimeData) {
        const uptimeDisplay = document.getElementById('uptimeDisplay');
        const uptimeBar = document.getElementById('uptimeBar');
        
        if (uptimeDisplay && uptimeBar) {
            let uptime;
            if (typeof uptimeData === 'number') {
                // Handle PM2 uptime (timestamp) or system uptime (seconds)
                if (uptimeData > 1000000000) {
                    // Looks like a timestamp
                    uptime = Date.now() - uptimeData;
                } else {
                    // Looks like seconds
                    uptime = uptimeData * 1000;
                }
            } else {
                uptime = 0;
            }
            
            const hours = Math.floor(uptime / (1000 * 60 * 60));
            const minutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));
            
            uptimeDisplay.textContent = `${hours}h ${minutes}m`;
            
            // Uptime progress bar (max 24 hours = 100%)
            const uptimePercent = Math.min((hours / 24) * 100, 100);
            uptimeBar.style.width = uptimePercent + '%';
        }
    }
    
    // Update system stats if available
    if (systemData) {
        // Update CPU usage
        const cpuDisplay = document.getElementById('cpuUsage');
        const cpuBar = document.getElementById('cpuBar');
        if (cpuDisplay && cpuBar && systemData.cpu !== undefined) {
            const cpuUsage = Math.round(systemData.cpu);
            cpuDisplay.textContent = `${cpuUsage}%`;
            cpuBar.style.width = `${cpuUsage}%`;
        }
        
        // Update Memory usage
        const memoryDisplay = document.getElementById('memoryUsage');
        const memoryBar = document.getElementById('memoryBar');
        if (memoryDisplay && memoryBar && systemData.memory) {
            const memUsed = systemData.memory.used || 0;
            const memTotal = systemData.memory.total || 1;
            const memPercent = Math.round((memUsed / memTotal) * 100);
            memoryDisplay.textContent = `${memPercent}%`;
            memoryBar.style.width = `${memPercent}%`;
        }
    }
    
    // Add electric glow effects to cards when data updates
    document.querySelectorAll('.glass-card').forEach(card => {
        card.style.boxShadow = '0 0 30px rgba(59, 130, 246, 0.3)';
        setTimeout(() => {
            card.style.boxShadow = '0 25px 45px rgba(0, 0, 0, 0.15)';
        }, 1000);
    });
}

// Initialize bot monitoring when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initializing bot monitoring...');
    startBotRealtimeMonitoring();
    
    // Initialize progress bars with fallback values
    const statusBar = document.getElementById('statusBar');
    const serverBar = document.getElementById('serverBar');
    const userBar = document.getElementById('userBar');
    const uptimeBar = document.getElementById('uptimeBar');
    
    if (statusBar) statusBar.style.width = '0%';
    if (serverBar) serverBar.style.width = '0%';
    if (userBar) userBar.style.width = '0%';
    if (uptimeBar) uptimeBar.style.width = '0%';
    
    // Fetch initial data
    fetchBotStats();
        // Credentials form
        const credForm = document.getElementById('credentialsForm');
        if (credForm) {
            credForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const fd = new FormData(credForm);
                const payload = Object.fromEntries(fd.entries());
                showLoading('Updating credentials...');
                try {
                    const r = await fetch('/api/bot/credentials', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
                    const j = await r.json();
                    if (j.success) { showNotification('Credentials updated', 'success'); setTimeout(()=>location.reload(), 1500); } else { showNotification(j.message||'Update failed', 'error'); }
                } catch { showNotification('Request failed', 'error'); }
            });
        }
        const delBtn = document.getElementById('deleteBotBtn');
        if (delBtn) {
            delBtn.addEventListener('click', async () => {
                if (!confirm('This will stop and remove your bot. Continue?')) return;
                showLoading('Removing bot...');
                try {
                    const r = await fetch('/api/bot', { method:'DELETE'});
                    const j = await r.json();
                    if (j.success) { showNotification('Bot removed', 'success'); setTimeout(()=>location.reload(), 1500); } else { showNotification(j.message||'Remove failed', 'error'); }
                } catch { showNotification('Remove failed', 'error'); }
            });
        }
});

// Clean up when page unloads
window.addEventListener('beforeunload', function() {
    stopBotRealtimeMonitoring();
});

</script>

<%- include('../layouts/footer') %>
